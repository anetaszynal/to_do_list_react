{"version":3,"sources":["components/Container/styled.js","components/Container/Container.jsx","components/Header/Header.jsx","components/Section/styled.js","components/Section/Section.jsx","components/Form/styled.js","components/Form/Form.jsx","components/Tasks/styled.js","components/Tasks/Tasks.jsx","components/Buttons/styled.js","components/Buttons/Buttons.jsx","App.js","useTasks.js","serviceWorker.js","index.js"],"names":["Content","styled","main","Container","children","Header","title","SectionContent","section","SectionHeader","header","SectionTitle","h2","SectionBody","div","Section","body","additionalContent","FormContener","form","FormInput","input","FormButton","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","trimmedTaskContent","trim","preventDefault","length","ref","placeholder","value","onChange","target","onClick","current","focus","List","ul","ListItem","li","hidden","css","ListButton","deleteTask","ListContent","span","done","Tasks","tasks","toggleTaskDone","hideDone","map","id","content","key","ButtonsContener","Button","Buttons","completeAll","toggleHideDone","disabled","every","App","setHideDone","tasksFromLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","task","filter","useTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9f109eb.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Content = styled.main`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;","import React from 'react';\r\nimport { Content } from './styled';\r\n\r\nexport const Container = ({ children }) => (\r\n  <Content>\r\n    {children}\r\n  </Content>\r\n);","import React from 'react';\r\n\r\nexport const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);","import styled from 'styled-components';\r\n\r\nexport const SectionContent = styled.section`\r\n  margin: 10px 0px;\r\n  background-color: white;\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n  padding: 15px;\r\n  border-bottom: 2px solid #eeeeee;\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n      grid-template-columns: 1fr;\r\n   }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  margin: 0;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 15px;\r\n`;","import React from 'react';\r\nimport { SectionContent, SectionHeader, SectionTitle, SectionBody } from './styled';\r\n\r\nexport const Section = ({ title, body, additionalContent }) => (\r\n  <SectionContent>\r\n    <SectionHeader>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {additionalContent}\r\n    </SectionHeader>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </SectionContent>\r\n);","import styled from 'styled-components';\r\n\r\nexport const FormContener = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 15px;\r\n\r\n    @media (max-width: 767px) {\r\n      grid-template-columns: 1fr\r\n   }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 10px;\r\n  border: 2px solid #eee;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: teal;\r\n  color: white;\r\n\r\n   &:hover {\r\n    transition: background-color 1s, transform 2s;\r\n    background-color: rgba(0, 128, 128, 0.712);\r\n    transform: scale(1.2);\r\n   }\r\n`;","import React, { useState, useRef } from 'react';\r\nimport { FormContener, FormInput, FormButton } from './styled';\r\n\r\nexport const Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const onFormSubmit = (event) => {\r\n    const trimmedTaskContent = newTaskContent.trim();\r\n    event.preventDefault();\r\n    if (trimmedTaskContent.length > 0) {\r\n      addNewTask(trimmedTaskContent);\r\n      setNewTaskContent(\"\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <FormContener onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        ref={inputRef}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        value={newTaskContent}\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <FormButton onClick={() => inputRef.current.focus()}>Dodaj zadanie</FormButton>\r\n    </FormContener>\r\n  )\r\n};","import styled, { css } from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  padding: 15px;\r\n  border-bottom: 2px solid #eee;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 15px;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) => hidden && css`\r\n     display: none;\r\n  `}\r\n`;\r\n\r\nexport const ListButton = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: green;\r\n  border: none;\r\n  color: white;\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    background-color: rgba(0, 128, 0, 0.712);\r\n  }\r\n\r\n  ${({ deleteTask }) => deleteTask && css`\r\n    background-color: red;\r\n\r\n    &:hover {\r\n      background-color: rgba(255, 0, 0, 0.712);\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const ListContent = styled.span`\r\n  ${({ done }) => done && css` \r\n    text-decoration: line-through;\r\n   `} \r\n`;","import React from 'react';\r\nimport { List, ListItem, ListButton, ListContent } from './styled';\r\n\r\nexport const Tasks = ({ tasks, toggleTaskDone, deleteTask, hideDone }) => (\r\n  <List>\r\n    {tasks.map(({ id, done, content }) => (\r\n      <ListItem\r\n        key={id}\r\n        hidden={done && hideDone}\r\n      >\r\n        <ListButton onClick={() => toggleTaskDone(id)}>\r\n          {done ? \"âœ”\" : \"\"}\r\n        </ListButton>\r\n        <ListContent done={done}>\r\n          {content}\r\n        </ListContent>\r\n        <ListButton\r\n          onClick={() => deleteTask(id)}\r\n          deleteTask\r\n        >\r\n          ðŸ—‘\r\n        </ListButton>\r\n      </ListItem>\r\n    ))}\r\n  </List>\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonsContener = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin: 15px 15px 15px 0px;\r\n  background: transparent;\r\n  border: none;\r\n  color: teal;\r\n\r\n  @media (max-width: 767px) {\r\n     width: 100%;\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    color: rgba(0, 128, 128, 0.712);\r\n  }\r\n\r\n  &:disabled {\r\n    color: gray;\r\n  }\r\n`;","import React from 'react';\r\nimport { ButtonsContener, Button } from './styled';\r\n\r\nexport const Buttons = ({ tasks, completeAll, hideDone, toggleHideDone }) => (\r\n  tasks.length > 0 && (\r\n    <ButtonsContener>\r\n      <Button onClick={toggleHideDone}>\r\n        {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n    </Button>\r\n      <Button\r\n        onClick={completeAll}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        UkoÅ„cz wszystkie\r\n      </Button>\r\n    </ButtonsContener>\r\n  )\r\n\r\n);","import React, { useState } from 'react';\nimport { Container } from './components/Container';\nimport { Header } from './components/Header';\nimport { Section } from './components/Section';\nimport { Form } from './components/Form';\nimport { Tasks } from './components/Tasks';\nimport { Buttons } from './components/Buttons';\nimport { useTasks } from './useTasks';\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    addNewTask,\n    toggleTaskDone,\n    deleteTask,\n    completeAll,\n  } = useTasks();\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={\n          <Form\n            addNewTask={addNewTask}\n          />\n        }\n      />\n      <Section\n        title=\"Lista zadaÅ„\"\n        additionalContent={\n          <Buttons\n            tasks={tasks}\n            completeAll={completeAll}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleTaskDone={toggleTaskDone}\n            deleteTask={deleteTask}\n          />\n        }\n      />\n    </Container>\n\n  );\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useTasks = () => {\r\n  const getInitialTasks = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n    return tasksFromLocalStorage\r\n      ? JSON.parse(tasksFromLocalStorage)\r\n      : []\r\n  }\r\n\r\n  const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        id: tasks.length + 1,\r\n        content,\r\n        done: false\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n      return task;\r\n    }));\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const completeAll = () => {\r\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true })))\r\n  };\r\n\r\n\r\n  return { tasks, addNewTask, toggleTaskDone, deleteTask, completeAll };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}