{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","GlobalStyle.js","common/Container/styled.js","common/Container/Container.jsx","common/Header/Header.jsx","common/Section/styled.js","common/Section/Section.jsx","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/styled.js","features/tasks/TasksPage/Form/Form.jsx","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/TasksList.jsx","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TasksButtons/styled.js","features/tasks/Button/styled.js","features/tasks/TasksPage/TasksButtons/TasksButtons.jsx","features/tasks/TasksPage/Search/Search.jsx","features/tasks/TasksPage/queryParameters.js","features/tasks/FetchExampleTasksButton/FetchExampleTasksButton.jsx","features/tasks/TasksPage/TasksPage.js","features/tasks/TaskPage/TaskPage.jsx","features/author/AuthorPage.jsx","styled.js","App.js","index.js","theme.js"],"names":["saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","isLoading","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleTaskDone","taskId","index","findIndex","id","done","deleteTask","splice","toggleHideDone","state","completeAll","fetchExampleTasks","setTasks","setIsLoading","actions","selectTasks","selectHideDone","selectIsLoading","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","GlobalStyle","createGlobalStyle","theme","color","brightGray","Content","styled","main","Container","children","Header","title","SectionContent","section","white","SectionHeader","header","breakpoint","mobileMax","SectionTitle","h2","SectionBody","div","Section","body","additionalContent","FormButton","button","teal","FormContener","form","FormInput","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trimmedTaskContent","trim","length","nanoid","content","ref","placeholder","value","onChange","target","StyledNavLink","NavLink","List","ul","ListItem","li","hidden","css","ListButton","greenLeaf","red","brightRed","ListContent","span","TasksList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","key","onClick","to","ButtonsContener","Button","gray","TasksButtons","disabled","every","Search","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","delete","set","pathname","toString","useReplaceQueryParameter","as","console","log","FetchExampleTasksButton","exampleTaskLoading","TasksPage","TaskPage","useParams","find","getTaskById","AuthorPage","attrs","activeClassName","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77c9aa86.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => {\r\n  const tasks = JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n  return tasks;\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    isLoading: false,\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    deleteTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    completeAll: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: () => {},\r\n\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n    setIsLoading: (state, { payload }) => {\r\n      state.isLoading = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleTaskDone,\r\n  deleteTask,\r\n  toggleHideDone,\r\n  completeAll,\r\n  fetchExampleTasks,\r\n  setTasks,\r\n  setIsLoading,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks.tasks;\r\nexport const selectHideDone = (state) => state.tasks.hideDone;\r\nexport const selectIsLoading = (state) => state.tasks.isLoading;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n  selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/to_do_list_react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n","import {\r\n  takeLatest,\r\n  call,\r\n  put,\r\n  delay,\r\n  takeEvery,\r\n  select,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  fetchExampleTasks,\r\n  setIsLoading,\r\n  selectTasks,\r\n  setTasks,\r\n} from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield put(setIsLoading(true));\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(setTasks(exampleTasks));\r\n    yield put(setIsLoading(false));\r\n  } catch (error) {\r\n    yield call(\r\n      alert,\r\n      \"Nie udało się pobrać przykładowych zadań. Spróbuj później.\"\r\n    );\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([tasksSaga()]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: ${({ theme }) => theme.color.brightGray};\r\n}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Content = styled.main`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;","import React from 'react';\r\nimport { Content } from './styled';\r\n\r\nexport const Container = ({ children }) => (\r\n  <Content>\r\n    {children}\r\n  </Content>\r\n);","import React from 'react';\r\n\r\nexport const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const SectionContent = styled.section`\r\n  margin: 10px 0px;\r\n  background-color: ${({ theme }) => theme.color.white};\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n  padding: 15px;\r\n  border-bottom: 2px solid #eeeeee;\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  margin: 0;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 15px;\r\n`;\r\n","import React from 'react';\r\nimport { SectionContent, SectionHeader, SectionTitle, SectionBody } from './styled';\r\n\r\nexport const Section = ({ title, body, additionalContent }) => (\r\n  <SectionContent>\r\n    <SectionHeader>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {additionalContent}\r\n    </SectionHeader>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </SectionContent>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const FormButton = styled.button`\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: ${({ theme }) => theme.color.teal};\r\n  color: ${({ theme }) => theme.color.white};\r\n\r\n  &:hover {\r\n    transition: background-color 1s, transform 1s;\r\n    filter: brightness(130%);\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const FormContener = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 15px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 10px;\r\n  border: 2px solid ${({ theme }) => theme.color.brightGray};\r\n`;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { FormButton } from \"./styled\";\r\nimport { FormInput, FormContener } from \"../../Input/styled\";\r\n\r\nexport const Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    focusInput();\r\n\r\n    const trimmedTaskContent = newTaskContent.trim();\r\n    if (trimmedTaskContent.length > 0) {\r\n      dispatch(\r\n        addTask({\r\n          id: nanoid(),\r\n          content: trimmedTaskContent,\r\n          done: false,\r\n        })\r\n      );\r\n      setNewTaskContent(\"\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <FormContener onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        ref={inputRef}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        value={newTaskContent}\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <FormButton>Dodaj zadanie</FormButton>\r\n    </FormContener>\r\n  );\r\n};\r\n","import styled, { css } from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.teal};\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  padding: 15px;\r\n  border-bottom: 2px solid ${({ theme }) => theme.color.brightGray};\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 15px;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const ListButton = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: ${({ theme }) => theme.color.greenLeaf};\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  ${({ deleteTask }) =>\r\n    deleteTask &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.color.red};\r\n\r\n      &:hover {\r\n        background-color: ${({ theme }) => theme.color.brightRed};\r\n      }\r\n    `}\r\n`;\r\n\r\nexport const ListContent = styled.span`\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  StyledNavLink,\r\n  ListButton,\r\n  ListContent,\r\n} from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleTaskDone,\r\n  deleteTask,\r\n  selectHideDone,\r\n  selectTasksByQuery,\r\n} from \"../../tasksSlice\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nexport const TasksList = () => {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(({ id, done, content }) => (\r\n        <ListItem key={id} hidden={done && hideDone}>\r\n          <ListButton onClick={() => dispatch(toggleTaskDone(id))}>\r\n            {done ? \"✔\" : \"\"}\r\n          </ListButton>\r\n          <ListContent done={done}>\r\n            <StyledNavLink to={`/zadania/${id}`}>{content}</StyledNavLink>\r\n          </ListContent>\r\n          <ListButton onClick={() => dispatch(deleteTask(id))} deleteTask>\r\n            🗑\r\n          </ListButton>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","export default \"szukaj\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContener = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  margin: 15px 15px 15px 0px;\r\n  background: transparent;\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.teal};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    width: 100%;\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.gray};\r\n\r\n    &:hover {\r\n      filter: brightness(100%);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ButtonsContener } from \"./styled\";\r\nimport { Button } from \"../../Button\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectTasks,\r\n  toggleHideDone,\r\n  completeAll,\r\n  selectHideDone,\r\n} from \"../../tasksSlice\";\r\n\r\nexport const TasksButtons = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ButtonsContener>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => {\r\n              dispatch(toggleHideDone());\r\n            }}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              dispatch(completeAll());\r\n            }}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </ButtonsContener>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  useQueryParameter,\r\n  useReplaceQueryParameter,\r\n} from \"../queryParameters\";\r\nimport { FormInput, FormContener } from \"../../Input/styled\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nexport const Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    console.log(target.value);\r\n\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FormContener as=\"div\">\r\n      <FormInput\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </FormContener>\r\n  );\r\n};\r\n","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  return new URLSearchParams(location.search).get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n\r\n  return ({ key, value }) => {\r\n    if (value.trim() === \"\") {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchExampleTasks, selectIsLoading } from \"../tasksSlice\";\r\nimport { Button } from \"../Button\";\r\n\r\nexport const FetchExampleTasksButton = () => {\r\n  const dispatch = useDispatch();\r\n  const exampleTaskLoading = useSelector(selectIsLoading);\r\n\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        dispatch(fetchExampleTasks());\r\n      }}\r\n    >\r\n      {exampleTaskLoading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n    </Button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"../../../common/Container\";\r\nimport { Header } from \"../../../common/Header\";\r\nimport { Section } from \"../../../common/Section\";\r\nimport { Form } from \"./Form\";\r\nimport { TasksList } from \"./TasksList\";\r\nimport { TasksButtons } from \"../TasksPage/TasksButtons\";\r\nimport { Search } from \"./Search/Search\";\r\nimport { FetchExampleTasksButton } from \"../FetchExampleTasksButton/FetchExampleTasksButton\";\r\n\r\nexport const TasksPage = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        additionalContent={<FetchExampleTasksButton />}\r\n        body={<Form />}\r\n      />\r\n      <Section title=\"Wyszukiwarka\" body={<Search />} />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        additionalContent={<TasksButtons />}\r\n        body={<TasksList />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"../../../common/Container\";\r\nimport { Section } from \"../../../common/Section\";\r\nimport { Header } from \"../../../common/Header\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nexport const TaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania 😥\"}\r\n        body={\r\n          task ? (\r\n            <>\r\n              {task.done\r\n                ? \"Zadanie zostało ukończone. Gratuluję 😉\"\r\n                : \"Zadanie nie zostało jeszcze ukończone 😥\"}\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"../../common/Container\";\r\nimport { Header } from \"../../common/Header\";\r\nimport { Section } from \"../../common/Section\";\r\n\r\nexport const AuthorPage = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"O autorze\" />\r\n      <Section\r\n        title=\"Aneta Szynal\"\r\n        body={\r\n          <>\r\n            <p>\r\n              Uśmiechnięta, komunikatywna oraz pełna szacunku dla innych. <br />\r\n              Od 2019 roku śmiało krocząca ku programowaniu. Niewielkie\r\n              doświadczenie nadrabiam{\" \"}\r\n              <b>wielkim zaangażowaniem i chęcią nauki.</b> W wolnym czasie\r\n              uwielbiam czytać książki oraz rozwiązywać łamigłówki.\r\n            </p>\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  text-decoration: none;\r\n  color: white;\r\n  padding: 10px;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(0.8);\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  background-color: ${({ theme }) => theme.color.teal};\r\n  list-style-type: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  padding: 15px;\r\n  margin: 0px;\r\n`;\r\n","import React from \"react\";\nimport { Route, Switch, HashRouter, Redirect } from \"react-router-dom\";\nimport { TasksPage } from \"./features/tasks/TasksPage/TasksPage\";\nimport { TaskPage } from \"./features/tasks/TaskPage\";\nimport { AuthorPage } from \"./features/author/AuthorPage\";\nimport { StyledNavLink, List } from \"./styled\";\n\nexport const App = () => (\n  <HashRouter>\n    <nav>\n      <List>\n        <li>\n          <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\n        </li>\n      </List>\n      <Switch>\n        <Route path=\"/zadania/:id\">\n          <TaskPage />\n        </Route>\n        <Route path=\"/zadania\">\n          <TasksPage />\n        </Route>\n        <Route path=\"/autor\">\n          <AuthorPage />\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/zadania\" />\n        </Route>\n      </Switch>\n    </nav>\n  </HashRouter>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport store from \"./store\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { App } from \"./App\";\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export const theme = {\r\n  color: {\r\n    white: \"#FFFFFF\",\r\n    brightGray: \"#eeeeee\",\r\n    gray: \"#808080\",\r\n    teal: \"#008080\",\r\n    greenLeaf: \"#2D730C\",\r\n    brightRed: \"#FB565F\",\r\n    red: \"#FF0000\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax: 767,\r\n  },\r\n};\r\n"],"sourceRoot":""}