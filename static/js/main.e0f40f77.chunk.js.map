{"version":3,"sources":["features/Tasks/tasksSlice.js","store.js","GlobalStyle.js","common/Container/styled.js","common/Container/Container.jsx","common/Header/Header.jsx","common/Section/styled.js","common/Section/Section.jsx","features/Tasks/Form/styled.js","features/Tasks/Form/Form.jsx","features/Tasks/TasksList/styled.js","features/Tasks/TasksList/TasksList.jsx","features/Tasks/Buttons/styled.js","features/Tasks/Buttons/Buttons.jsx","features/Tasks/Tasks.js","App.js","index.js","theme.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleTaskDone","index","findIndex","id","done","deleteTask","state","filter","toggleHideDone","completeAll","map","task","actions","selectTasks","configureStore","reducer","tasksReducer","GlobalStyle","createGlobalStyle","theme","color","brightGray","Content","styled","main","Container","children","Header","title","SectionContent","section","SectionHeader","header","SectionTitle","h2","SectionBody","div","Section","body","additionalContent","FormContener","form","breakpoint","mobileMax","FormInput","input","FormButton","button","teal","white","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trimmedTaskContent","trim","length","nanoid","content","ref","placeholder","value","onChange","target","List","ul","ListItem","li","hidden","css","ListButton","greenLeaf","red","brightRed","ListContent","span","TasksList","useSelector","key","onClick","ButtonsContener","Button","gray","Buttons","disabled","every","Tasks","App","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"iOAEMA,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZC,MAAO,GACPC,UAAU,GAEZC,SAAU,CACRC,QAAS,cAA6B,IAA1BH,EAAyB,EAAzBA,MAAWI,EAAc,EAAdA,QACrBJ,EAAMK,KAAKD,IAEbE,eAAgB,cAA6B,IAA1BN,EAAyB,EAAzBA,MAAWI,EAAc,EAAdA,QACtBG,EAAQP,EAAMQ,WAAU,qBAAGC,KAAgBL,KACjDJ,EAAMO,GAAOG,MAAQV,EAAMO,GAAOG,MAEpCC,WAAY,SAACC,EAAD,GAAyB,IAAfR,EAAc,EAAdA,QACpBQ,EAAMZ,MAAQY,EAAMZ,MAAMa,QAAO,qBAAGJ,KAAgBL,MAEtDU,eAAgB,SAACF,GACfA,EAAMX,UAAYW,EAAMX,UAE1Bc,YAAa,SAACH,GACZA,EAAMZ,MAAQY,EAAMZ,MAAMgB,KAAI,SAACC,GAAD,mBAAC,eAAeA,GAAhB,IAAsBP,MAAM,W,EAW5Dd,EAAWsB,QALbf,E,EAAAA,QACAG,E,EAAAA,eACAK,E,EAAAA,WACAG,E,EAAAA,eACAC,E,EAAAA,YAEWI,EAAc,SAACP,GAAD,OAAWA,EAAMZ,OAC7BJ,IAAf,QCjCewB,cAAe,CAC5BC,QAAS,CACPrB,MAAOsB,K,sPCHJ,IAAMC,EAAcC,YAAH,KAWF,qBAAGC,MAAkBC,MAAMC,c,yGCX1C,IAAMC,EAAUC,IAAOC,KAAV,KCCPC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACvB,kBAACJ,EAAD,KACGI,ICHQC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACpB,gCACE,4BAAKA,K,8jBCFF,IAAMC,EAAiBN,IAAOO,QAAV,KAKdC,EAAgBR,IAAOS,OAAV,KAYbC,EAAeV,IAAOW,GAAV,KAIZC,EAAcZ,IAAOa,IAAV,KCpBXC,EAAU,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,kBAAhB,OACrB,kBAACV,EAAD,KACE,kBAACE,EAAD,KACE,kBAACE,EAAD,KAAeL,GACdW,GAEH,kBAACJ,EAAD,KACGG,K,wmBCRA,IAAME,EAAejB,IAAOkB,KAAV,KAKF,qBAAGtB,MAAkBuB,WAAWC,aAK1CC,EAAYrB,IAAOsB,MAAV,KAEA,qBAAG1B,MAAkBC,MAAMC,cAGpCyB,EAAavB,IAAOwB,OAAV,KAGD,qBAAG5B,MAAkBC,MAAM4B,QACtC,qBAAG7B,MAAkBC,MAAM6B,SCfzBC,EAAO,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACjBC,EADiB,KACDC,EADC,KAElBC,EAAWC,iBAAO,MAClBC,EAAWC,cAwBjB,OACE,kBAACjB,EAAD,CAAckB,SAnBK,SAACC,GACpBA,EAAMC,iBAJNN,EAASO,QAAQC,QAOjB,IAAMC,EAAqBX,EAAeY,OACtCD,EAAmBE,OAAS,IAC9BT,EACE3D,EAAQ,CACNM,GAAI+D,cACJC,QAASJ,EACT3D,MAAM,KAGViD,EAAkB,OAOlB,kBAACT,EAAD,CACEwB,IAAKd,EACLe,YAAY,wBACZC,MAAOlB,EACPmB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBnB,EAAkBmB,EAAOF,UAErD,kBAACxB,EAAD,wB,+hCCvCC,IAAM2B,EAAOlD,IAAOmD,GAAV,KAMJC,EAAWpD,IAAOqD,GAAV,KAEQ,qBAAGzD,MAAkBC,MAAMC,cAMpD,qBAAGwD,QAEHC,YADM,QAMGC,GAAaxD,IAAOwB,OAAV,KAGD,qBAAG5B,MAAkBC,MAAM4D,aAEtC,qBAAG7D,MAAkBC,MAAM6B,SAOlC,qBAAG5C,YAEHyE,YADU,KAEY,qBAAG3D,MAAkBC,MAAM6D,OAGzB,qBAAG9D,MAAkBC,MAAM8D,gBAK1CC,GAAc5D,IAAO6D,KAAV,KACpB,qBAAGhF,MAEH0E,YADI,QC3CKO,GAAY,WAAO,IAAD,EACDC,YAAYzE,GAAhCnB,EADqB,EACrBA,MAAOC,EADc,EACdA,SACT6D,EAAWC,cAEjB,OACE,kBAACgB,EAAD,KACG/E,EAAMgB,KAAI,gBAAGP,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAM+D,EAAb,EAAaA,QAAb,OACT,kBAACQ,EAAD,CAAUY,IAAKpF,EAAI0E,OAAQzE,GAAQT,GACjC,kBAACoF,GAAD,CAAYS,QAAS,kBAAMhC,EAASxD,EAAeG,MAChDC,EAAO,SAAM,IAEhB,kBAAC+E,GAAD,CAAa/E,KAAMA,GAAO+D,GAC1B,kBAACY,GAAD,CAAYS,QAAS,kBAAMhC,EAASnD,EAAWF,KAAME,YAAU,GAA/D,sB,ofCfH,IAAMoF,GAAkBlE,IAAOa,IAAV,MAKfsD,GAASnE,IAAOwB,OAAV,MAIR,qBAAG5B,MAAkBC,MAAM4B,QAEf,qBAAG7B,MAAkBuB,WAAWC,aAU1C,qBAAGxB,MAAkBC,MAAMuE,QClB3BC,GAAU,WAAO,IAAD,EACCN,YAAYzE,GAAhCnB,EADmB,EACnBA,MAAOC,EADY,EACZA,SACT6D,EAAWC,cAEjB,OACE/D,EAAMuE,OAAS,GACb,kBAACwB,GAAD,KACE,kBAACC,GAAD,CACEF,QAAS,WACPhC,EAAShD,OAGVb,EAAW,aAAU,QALxB,mBAOA,kBAAC+F,GAAD,CACEF,QAAS,WACPhC,EAAS/C,MAEXoF,SAAUnG,EAAMoG,OAAM,qBAAG1F,SAJ3B,2BCXK2F,GAAQ,WACnB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQnE,MAAM,qBACd,kBAAC,EAAD,CAASA,MAAM,qBAAqBU,KAAM,kBAAC,EAAD,QAC1C,kBAAC,EAAD,CACEV,MAAM,mBACNW,kBAAmB,kBAAC,GAAD,MACnBD,KAAM,kBAAC,GAAD,UCbD0D,GAAM,kBAAM,kBAAC,GAAD,OCMzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,IAAD,CAAejF,MCZA,CACnBC,MAAO,CACL6B,MAAO,UACP5B,WAAY,UACZsE,KAAM,UACN3C,KAAM,UACNgC,UAAW,UACXE,UAAW,UACXD,IAAK,WAEPvC,WAAY,CACVC,UAAW,ODEP,kBAAC1B,EAAD,MACA,kBAAC,GAAD,SAINoF,SAASC,eAAe,W","file":"static/js/main.e0f40f77.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex(({ id }) => id === payload);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    deleteTask: (state, { payload }) => {\r\n      state.tasks = state.tasks.filter(({ id }) => id !== payload);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    completeAll: (state) => {\r\n      state.tasks = state.tasks.map((task) => ({ ...task, done: true }));\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleTaskDone,\r\n  deleteTask,\r\n  toggleHideDone,\r\n  completeAll,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/Tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: ${({ theme }) => theme.color.brightGray};\r\n}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Content = styled.main`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;","import React from 'react';\r\nimport { Content } from './styled';\r\n\r\nexport const Container = ({ children }) => (\r\n  <Content>\r\n    {children}\r\n  </Content>\r\n);","import React from 'react';\r\n\r\nexport const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);","import styled from 'styled-components';\r\n\r\nexport const SectionContent = styled.section`\r\n  margin: 10px 0px;\r\n  background-color: white;\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n  padding: 15px;\r\n  border-bottom: 2px solid #eeeeee;\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n      grid-template-columns: 1fr;\r\n   }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  margin: 0;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 15px;\r\n`;","import React from 'react';\r\nimport { SectionContent, SectionHeader, SectionTitle, SectionBody } from './styled';\r\n\r\nexport const Section = ({ title, body, additionalContent }) => (\r\n  <SectionContent>\r\n    <SectionHeader>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {additionalContent}\r\n    </SectionHeader>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </SectionContent>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const FormContener = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 15px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 10px;\r\n  border: 2px solid ${({ theme }) => theme.color.brightGray};\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: ${({ theme }) => theme.color.teal};\r\n  color: ${({ theme }) => theme.color.white};\r\n\r\n  &:hover {\r\n    transition: background-color 1s, transform 1s;\r\n    filter: brightness(130%);\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { FormContener, FormInput, FormButton } from \"./styled\";\r\n\r\nexport const Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    focusInput();\r\n\r\n    const trimmedTaskContent = newTaskContent.trim();\r\n    if (trimmedTaskContent.length > 0) {\r\n      dispatch(\r\n        addTask({\r\n          id: nanoid(),\r\n          content: trimmedTaskContent,\r\n          done: false,\r\n        })\r\n      );\r\n      setNewTaskContent(\"\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <FormContener onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        ref={inputRef}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        value={newTaskContent}\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <FormButton>Dodaj zadanie</FormButton>\r\n    </FormContener>\r\n  );\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  padding: 15px;\r\n  border-bottom: 2px solid ${({ theme }) => theme.color.brightGray};\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 15px;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const ListButton = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: ${({ theme }) => theme.color.greenLeaf};\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  ${({ deleteTask }) =>\r\n    deleteTask &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.color.red};\r\n\r\n      &:hover {\r\n        background-color: ${({ theme }) => theme.color.brightRed};\r\n      }\r\n    `}\r\n`;\r\n\r\nexport const ListContent = styled.span`\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n","import React from \"react\";\r\nimport { List, ListItem, ListButton, ListContent } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, deleteTask } from \"../tasksSlice\";\r\n\r\nexport const TasksList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(({ id, done, content }) => (\r\n        <ListItem key={id} hidden={done && hideDone}>\r\n          <ListButton onClick={() => dispatch(toggleTaskDone(id))}>\r\n            {done ? \"✔\" : \"\"}\r\n          </ListButton>\r\n          <ListContent done={done}>{content}</ListContent>\r\n          <ListButton onClick={() => dispatch(deleteTask(id))} deleteTask>\r\n            🗑\r\n          </ListButton>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContener = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin: 15px 15px 15px 0px;\r\n  background: transparent;\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.teal};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    width: 100%;\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.gray};\r\n\r\n    &:hover {\r\n      filter: brightness(100%);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ButtonsContener, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, completeAll } from \"../tasksSlice\";\r\n\r\nexport const Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    tasks.length > 0 && (\r\n      <ButtonsContener>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch(toggleHideDone());\r\n          }}\r\n        >\r\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch(completeAll());\r\n          }}\r\n          disabled={tasks.every(({ done }) => done)}\r\n        >\r\n          Ukończ wszystkie\r\n        </Button>\r\n      </ButtonsContener>\r\n    )\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"../../common/Container\";\r\nimport { Header } from \"../../common/Header\";\r\nimport { Section } from \"../../common/Section\";\r\nimport { Form } from \"../../features/Tasks/Form\";\r\nimport { TasksList } from \"../../features/Tasks/TasksList\";\r\nimport { Buttons } from \"../../features/Tasks/Buttons\";\r\n\r\nexport const Tasks = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section title=\"Dodaj nowe zadanie\" body={<Form />} />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        additionalContent={<Buttons />}\r\n        body={<TasksList />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Tasks } from \"./features/Tasks/Tasks\";\n\nexport const App = () => <Tasks />;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport store from \"./store\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { App } from \"./App\";\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export const theme = {\r\n  color: {\r\n    white: \"#FFFFFF\",\r\n    brightGray: \"#eeeeee\",\r\n    gray: \"#808080\",\r\n    teal: \"#008080\",\r\n    greenLeaf: \"#2D730C\",\r\n    brightRed: \"#FB565F\",\r\n    red: \"#FF0000\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax: 767,\r\n  },\r\n};\r\n"],"sourceRoot":""}