{"version":3,"sources":["components/Container/Container.jsx","components/Header/Header.jsx","components/Section/Section.jsx","components/Form/Form.jsx","components/Tasks/Tasks.jsx","components/Buttons/Buttons.jsx","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","title","Section","body","additionalContent","Form","addNewTask","useState","newTaskContent","setNewTaskContent","formFocus","useRef","onSubmit","event","trimmedTaskContent","trim","preventDefault","length","ref","placeholder","value","onChange","target","onClick","current","focus","Tasks","tasks","toggleTaskDone","deleteTask","hideDone","map","id","done","content","key","Buttons","completeAll","toggleHideDone","disabled","every","App","JSON","parse","localStorage","getItem","setTasks","setHideDone","useEffect","setItem","stringify","task","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e2d4dfe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nexport const Container = ({ children }) => (\r\n  <main className=\"container\">\r\n    {children}\r\n  </main>\r\n);","import React from 'react';\r\n\r\nexport const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const Section = ({ title, body, additionalContent }) => (\r\n  <section className=\"section\">\r\n    <header className=\"section__header\">\r\n      <h2 className=\"section__title\">{title}</h2>\r\n      {additionalContent}\r\n    </header>\r\n    <div className=\"section__body\">\r\n      {body}\r\n    </div>\r\n  </section>\r\n);","import React, { useState, useRef } from 'react';\r\nimport './style.css';\r\n\r\nexport const Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const formFocus = useRef(null);\r\n\r\n  const onFormSubmit = (event) => {\r\n    const trimmedTaskContent = newTaskContent.trim();\r\n    event.preventDefault();\r\n    if (trimmedTaskContent.length > 0) {\r\n      addNewTask(trimmedTaskContent);\r\n      setNewTaskContent(\"\")\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        ref={formFocus}\r\n        className=\"form__field\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        value={newTaskContent}\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <button onClick={() => { formFocus.current.focus() }} className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n  )\r\n};","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const Tasks = ({ tasks, toggleTaskDone, deleteTask, hideDone }) => (\r\n  <ul className=\"tasksList\">\r\n    {tasks.map(({ id, done, content }) => (\r\n      <li\r\n        key={id}\r\n        className={`tasksList__item ${done && hideDone ? \"tasksList__item--hidden\" : \"\"}`}\r\n      >\r\n        <button onClick={() => toggleTaskDone(id)} className=\"tasksList__button\">\r\n          {done ? \"âœ”\" : \"\"}\r\n        </button>\r\n        <span\r\n          className={done ? \"tasksList__content--done\" : \"\"}>\r\n          {content}\r\n        </span>\r\n        <button\r\n          onClick={() => deleteTask(id)}\r\n          className=\"tasksList__button tasksList__button--deleteTask\"\r\n        >\r\n          ðŸ—‘\r\n          </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const Buttons = ({ tasks, completeAll, hideDone, toggleHideDone }) => (\r\n  tasks.length > 0 && (\r\n    <div className=\"buttons\">\r\n      <button onClick={toggleHideDone} className=\"buttons__button\">\r\n        {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n    </button>\r\n      <button\r\n        onClick={completeAll}\r\n        className=\"buttons__button\"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        UkoÅ„cz wszystkie\r\n      </button>\r\n    </div>\r\n  )\r\n\r\n);","import React, { useState, useEffect } from 'react';\nimport { Container } from './components/Container';\nimport { Header } from './components/Header';\nimport { Section } from './components/Section';\nimport { Form } from './components/Form';\nimport { Tasks } from './components/Tasks';\nimport { Buttons } from './components/Buttons';\n\nfunction App() {\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\n  const [hideDone, setHideDone] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length + 1,\n        content,\n        done: false\n      }\n    ]);\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const completeAll = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true })))\n  };\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={\n          <Form\n            addNewTask={addNewTask}\n          />\n        }\n      />\n      <Section\n        title=\"Lista zadaÅ„\"\n        additionalContent={\n          <Buttons\n            tasks={tasks}\n            completeAll={completeAll}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleTaskDone={toggleTaskDone}\n            deleteTask={deleteTask}\n          />\n        }\n      />\n    </Container>\n\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}