{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","GlobalStyle.js","common/Container/styled.js","common/Container/Container.jsx","common/Header/Header.jsx","common/Section/styled.js","common/Section/Section.jsx","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/styled.js","features/tasks/TasksPage/Form/Form.jsx","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TasksList/TasksList.jsx","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TasksButtons/styled.js","features/tasks/Button/styled.js","features/tasks/TasksPage/TasksButtons/TasksButtons.jsx","features/tasks/TasksPage/Search/Search.jsx","features/tasks/FetchExampleTasksButton/FetchExampleTasksButton.jsx","features/tasks/TasksPage/TasksPage.js","features/tasks/TaskPage/TaskPage.jsx","features/author/AuthorPage.jsx","styled.js","routes.js","App.js","index.js","theme.js"],"names":["saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","isLoading","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleTaskDone","taskId","index","findIndex","id","done","deleteTask","splice","toggleHideDone","state","completeAll","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasks","selectHideDone","selectIsLoading","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","GlobalStyle","createGlobalStyle","theme","color","brightGray","Content","styled","main","Container","children","Header","title","SectionContent","section","white","SectionHeader","header","breakpoint","mobileMax","SectionTitle","h2","SectionBody","div","Section","body","additionalContent","FormContainer","form","FormButton","button","teal","Wrapper","FormInput","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trimmedTaskContent","trim","length","nanoid","content","ref","placeholder","value","onChange","target","StyledNavLink","NavLink","List","ul","ListItem","li","hidden","css","ListButton","greenLeaf","red","brightRed","ListContent","span","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TasksList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Button","gray","TasksButtons","disabled","every","Search","replaceQueryParameter","history","useHistory","searchParams","delete","set","pathname","toString","useReplaceQueryParameter","FetchExampleTasksButton","exampleTaskLoading","TasksPage","TaskPage","useParams","find","getTaskById","AuthorPage","attrs","activeClassName","toTask","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a487da6.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => {\r\n    const tasks = JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n    return tasks;\r\n};\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {getTasksFromLocalStorage} from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        isLoading: false,\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({tasks}, {payload: task}) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload: taskId}) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteTask: ({tasks}, {payload: taskId}) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        completeAll: ({tasks}) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, {payload: tasks}) => {\r\n            state.tasks = tasks;\r\n            state.isLoading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.isLoading = false;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    toggleHideDone,\r\n    completeAll,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks.tasks;\r\nexport const selectHideDone = (state) => state.tasks.hideDone;\r\nexport const selectIsLoading = (state) => state.tasks.isLoading;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({id}) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({content}) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase())\r\n    );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/to_do_list_react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};\r\n","import {\r\n    takeLatest,\r\n    call,\r\n    put,\r\n    delay,\r\n    takeEvery,\r\n    select,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n    fetchExampleTasks,\r\n    fetchExampleTasksError,\r\n    selectTasks,\r\n    fetchExampleTasksSuccess,\r\n} from \"./tasksSlice\";\r\nimport {getExampleTasks} from \"./getExampleTasks\";\r\nimport {saveTasksInLocalStorage} from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield  call(alert, \"Nie udało się pobrać przykładowych zadań. Spróbuj później.\")\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import {all} from \"redux-saga/effects\";\r\nimport {tasksSaga} from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([tasksSaga()]);\r\n}\r\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: ${({theme}) => theme.color.brightGray};\r\n}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Content = styled.main`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;","import React from 'react';\r\nimport {Content} from './styled';\r\n\r\nexport const Container = ({children}) => (\r\n    <Content>\r\n        {children}\r\n    </Content>\r\n);","import React from 'react';\r\n\r\nexport const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const SectionContent = styled.section`\r\n  margin: 10px 0px;\r\n  background-color: ${({theme}) => theme.color.white};\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n  padding: 15px;\r\n  border-bottom: 2px solid #eeeeee;\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n\r\n  @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  margin: 0;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 15px;\r\n`;\r\n","import React from 'react';\r\nimport {SectionContent, SectionHeader, SectionTitle, SectionBody} from './styled';\r\n\r\nexport const Section = ({title, body, additionalContent}) => (\r\n    <SectionContent>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {additionalContent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </SectionContent>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const FormContainer = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 15px;\r\n\r\n  @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: ${({theme}) => theme.color.teal};\r\n  color: ${({theme}) => theme.color.white};\r\n\r\n  &:hover {\r\n    transition: background-color 1s, transform 1s;\r\n    filter: brightness(130%);\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 10px;\r\n  border: 2px solid ${({theme}) => theme.color.brightGray};\r\n`;\r\n","import React, {useState, useRef} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {nanoid} from \"@reduxjs/toolkit\";\r\nimport {addTask} from \"../../tasksSlice\";\r\nimport {FormButton, FormContainer} from \"./styled\";\r\nimport {FormInput} from \"../../Input/styled\";\r\n\r\nexport const Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        focusInput();\r\n\r\n        const trimmedTaskContent = newTaskContent.trim();\r\n        if (trimmedTaskContent.length > 0) {\r\n            dispatch(\r\n                addTask({\r\n                    id: nanoid(),\r\n                    content: trimmedTaskContent,\r\n                    done: false,\r\n                })\r\n            );\r\n            setNewTaskContent(\"\");\r\n        }\r\n        return;\r\n    };\r\n\r\n    return (\r\n        <FormContainer onSubmit={onFormSubmit}>\r\n            <FormInput\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({target}) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>Dodaj zadanie</FormButton>\r\n        </FormContainer>\r\n    );\r\n};\r\n","import styled, {css} from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n  text-decoration: none;\r\n  color: ${({theme}) => theme.color.teal};\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  padding: 15px;\r\n  border-bottom: 2px solid ${({theme}) => theme.color.brightGray};\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 15px;\r\n  align-items: center;\r\n\r\n  ${({hidden}) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const ListButton = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: ${({theme}) => theme.color.greenLeaf};\r\n  border: none;\r\n  color: ${({theme}) => theme.color.white};\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  ${({deleteTask}) =>\r\n    deleteTask &&\r\n    css`\r\n      background-color: ${({theme}) => theme.color.red};\r\n\r\n      &:hover {\r\n        background-color: ${({theme}) => theme.color.brightRed};\r\n      }\r\n    `}\r\n`;\r\n\r\nexport const ListContent = styled.span`\r\n  ${({done}) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n","import {useHistory, useLocation} from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n    const location = useLocation();\r\n    return new URLSearchParams(location.search).get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    return ({key, value}) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value.trim() === \"\") {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    List,\r\n    ListItem,\r\n    StyledNavLink,\r\n    ListButton,\r\n    ListContent,\r\n} from \"./styled\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    selectHideDone,\r\n    selectTasksByQuery,\r\n} from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport {useQueryParameter} from \"../queryParameters\";\r\n\r\nexport const TasksList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({id, done, content}) => (\r\n                <ListItem key={id} hidden={done && hideDone}>\r\n                    <ListButton onClick={() => dispatch(toggleTaskDone(id))}>\r\n                        {done ? \"✔\" : \"\"}\r\n                    </ListButton>\r\n                    <ListContent done={done}>\r\n                        <StyledNavLink to={`/zadania/${id}`}>{content}</StyledNavLink>\r\n                    </ListContent>\r\n                    <ListButton onClick={() => dispatch(deleteTask(id))} deleteTask>\r\n                        🗑\r\n                    </ListButton>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n","export default \"szukaj\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  margin: 15px 15px 15px 0px;\r\n  background: transparent;\r\n  border: none;\r\n  color: ${({theme}) => theme.color.teal};\r\n\r\n  @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n    width: 100%;\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({theme}) => theme.color.gray};\r\n\r\n    &:hover {\r\n      filter: brightness(100%);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {Container} from \"./styled\";\r\nimport {Button} from \"../../Button\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {\r\n    selectTasks,\r\n    toggleHideDone,\r\n    completeAll,\r\n    selectHideDone,\r\n} from \"../../tasksSlice\";\r\n\r\nexport const TasksButtons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Container>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n                            dispatch(toggleHideDone());\r\n                        }}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            dispatch(completeAll());\r\n                        }}\r\n                        disabled={tasks.every(({done}) => done)}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    useQueryParameter,\r\n    useReplaceQueryParameter,\r\n} from \"../queryParameters\";\r\nimport {FormInput, Wrapper} from \"../../Input/styled\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nexport const Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({target}) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : \"\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <FormInput\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {fetchExampleTasks, selectIsLoading} from \"../tasksSlice\";\r\nimport {Button} from \"../Button\";\r\n\r\nexport const FetchExampleTasksButton = () => {\r\n    const dispatch = useDispatch();\r\n    const exampleTaskLoading = useSelector(selectIsLoading);\r\n\r\n    return (\r\n        <Button\r\n            onClick={() => {\r\n                dispatch(fetchExampleTasks());\r\n            }}\r\n            disabled={exampleTaskLoading}\r\n        >\r\n            {exampleTaskLoading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n        </Button>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Container} from \"../../../common/Container\";\r\nimport {Header} from \"../../../common/Header\";\r\nimport {Section} from \"../../../common/Section\";\r\nimport {Form} from \"./Form\";\r\nimport {TasksList} from \"./TasksList\";\r\nimport {TasksButtons} from \"../TasksPage/TasksButtons\";\r\nimport {Search} from \"./Search/Search\";\r\nimport {FetchExampleTasksButton} from \"../FetchExampleTasksButton/FetchExampleTasksButton\";\r\n\r\nexport const TasksPage = () => {\r\n    return (\r\n        <Container>\r\n            <Header title=\"Lista zadań\"/>\r\n            <Section\r\n                title=\"Dodaj nowe zadanie\"\r\n                additionalContent={<FetchExampleTasksButton/>}\r\n                body={<Form/>}\r\n            />\r\n            <Section title=\"Wyszukiwarka\" body={<Search/>}/>\r\n            <Section\r\n                title=\"Lista zadań\"\r\n                additionalContent={<TasksButtons/>}\r\n                body={<TasksList/>}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Container} from \"../../../common/Container\";\r\nimport {Section} from \"../../../common/Section\";\r\nimport {Header} from \"../../../common/Header\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getTaskById} from \"../tasksSlice\";\r\n\r\nexport const TaskPage = () => {\r\n    const {id} = useParams();\r\n    const task = useSelector((state) => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\"/>\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania 😥\"}\r\n                body={!!task && (\r\n                    task.done\r\n                        ? \"Zadanie zostało ukończone. Gratuluję 😉\"\r\n                        : \"Zadanie nie zostało jeszcze ukończone 😥\"\r\n                )}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Container} from \"../../common/Container\";\r\nimport {Header} from \"../../common/Header\";\r\nimport {Section} from \"../../common/Section\";\r\n\r\nexport const AuthorPage = () => {\r\n    return (\r\n        <Container>\r\n            <Header title=\"O autorze\"/>\r\n            <Section\r\n                title=\"Aneta Szynal\"\r\n                body={\r\n                    <>\r\n                        <p>\r\n                            Uśmiechnięta, komunikatywna oraz pełna szacunku dla innych. <br/>\r\n                            Od 2019 roku śmiało krocząca ku programowaniu. Niewielkie\r\n                            doświadczenie nadrabiam{\" \"}\r\n                            <b>wielkim zaangażowaniem i chęcią nauki.</b> W wolnym czasie\r\n                            uwielbiam czytać książki oraz rozwiązywać łamigłówki.\r\n                        </p>\r\n                    </>\r\n                }\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n","import styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n  text-decoration: none;\r\n  color:  ${({theme}) => theme.color.white};;\r\n  padding: 10px;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    filter: brightness(0.8);\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  background-color: ${({theme}) => theme.color.teal};\r\n  list-style-type: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  padding: 15px;\r\n  margin: 0px;\r\n`;\r\n","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({id} = {id: \":id\"}) => `/zadania/${id}`;","import React from \"react\";\nimport {Route, Switch, HashRouter, Redirect} from \"react-router-dom\";\nimport {TasksPage} from \"./features/tasks/TasksPage/TasksPage\";\nimport {TaskPage} from \"./features/tasks/TaskPage\";\nimport {AuthorPage} from \"./features/author/AuthorPage\";\nimport {StyledNavLink, List} from \"./styled\";\nimport {toAuthor, toTask, toTasks} from \"./routes\";\n\nexport const App = () => (\n    <HashRouter>\n        <nav>\n            <List>\n                <li>\n                    <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\n                </li>\n                <li>\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\n                </li>\n            </List>\n        </nav>\n        <Switch>\n            <Route path={toTask()}>\n                <TaskPage/>\n            </Route>\n            <Route path={toTasks()}>\n                <TasksPage/>\n            </Route>\n            <Route path={toAuthor()}>\n                <AuthorPage/>\n            </Route>\n            <Route>\n                <Redirect to={toTasks()}/>\n            </Route>\n        </Switch>\n    </HashRouter>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport {ThemeProvider} from \"styled-components\";\nimport store from \"./store\";\nimport {GlobalStyle} from \"./GlobalStyle\";\nimport {App} from \"./App\";\nimport {theme} from \"./theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <GlobalStyle/>\n                <App/>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","export const theme = {\r\n    color: {\r\n        white: \"#FFFFFF\",\r\n        brightGray: \"#eeeeee\",\r\n        gray: \"#808080\",\r\n        teal: \"#008080\",\r\n        greenLeaf: \"#2D730C\",\r\n        brightRed: \"#FB565F\",\r\n        red: \"#FF0000\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};\r\n"],"sourceRoot":""}